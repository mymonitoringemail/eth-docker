# Client choice: See https://eth-docker.net/docs/Usage/ClientSetup for available options
COMPOSE_FILE=networks.yml:nethermind.yml:teku-cl-only.yml:grafana.yml:grafana-localhost.yml:el-localhost.yml:cl-localhost.yml:mev-boost.yml
# Set the ETH address that priority fees and MEV rewards should be sent to
FEE_RECIPIENT=
# Decide whether to connect the CL to Flashbots MEV boost, and configure the VC to register with it.
# Set MEV_BOOST to "true" for MEV boost, or any other value including empty for not using MEV boost.
# If "true" and used with a CL, it also requires :mev-boost.yml in COMPOSE_FILE
MEV_BOOST=true
# For relay information, please see https://ethstaker.cc/mev-relay-list/
MEV_RELAYS=https://0xac6e77dfe25ecd6110b8e780608cce0dab71fdd5ebea22a16c0205200f2f8e2e3ad3b71d3499c54ad14d6c21b41a37ae@boost-relay.flashbots.net,https://0x8b5d2e73e2a3a55c6c87b8b6eb92e0149a125c852751db1422fa951e42a09b82c142c3ea98d0d9930b056a3bc9896b8f@bloxroute.max-profit.blxrbdn.com,https://0x98650451ba02064f7b000f5768cf0cf4d4e492317d82871bdc87ef841a0743f69f0f1eea11168503240ac35d101c9135@mainnet-relay.securerpc.com
# Graffiti to use for validator
GRAFFITI=
# Merged network to use. If using main net, set to mainnet.
NETWORK=mainnet
# CL rapid sync via initial state/checkpoint. Please use one from https://eth-clients.github.io/checkpoint-sync-endpoints/
# Alternatively, use an already synced CL that you trust. No trailing / for Teku, please.
RAPID_SYNC_URL=
# Doppelganger protection - set to "true" to enable. This will intentionally skip two epochs on client start, and attempt to
# detect duplicates of the validator(s) already running. Note this is NOT foolproof, though it can be useful when moving a node
DOPPELGANGER=true

# Secure web proxy - advanced use, please see instructions
DOMAIN=example.com
ACME_EMAIL=user@example.com
CF_EMAIL=user@example.com
CF_API_TOKEN=SECRETTOKEN
AWS_PROFILE=myprofile
AWS_HOSTED_ZONE_ID=myzoneid
GRAFANA_HOST=grafana
PROM_HOST=prometheus
PRYSM_HOST=prysm
EE_HOST=ee
EL_HOST=el
EL_LB=el-lb
EL_WS_HOST=elws
EL_WS_LB=elws-lb
CL_HOST=cl
CL_LB=cl-lb
DDNS_SUBDOMAIN=
DDNS_PROXY=true

# Some clients suggest adjusting to higher (or lower) peer count. Adjust here, per client
# Nimbus peer count should not be set below 70. CL_MIN_PEER_COUNT is used for Teku only.
CL_MAX_PEER_COUNT=
CL_MIN_PEER_COUNT=
# Maximum active peers for EL. EL_MIN_PEER_COUNT is used for Akula only.
EL_MAX_PEER_COUNT=
EL_MIN_PEER_COUNT=

# Beaconcha.in API key for sending client stats. Automatic for Lighthouse and Teku, or with prysm-stats.yml,
# source build only for Prysm as of Sept 2021.
# Specify as just the API key as found at https://beaconcha.in/user/settings#api, and give the machine name separately
BEACON_STATS_API=
BEACON_STATS_MACHINE=

# IP of the host you want to use in Docker (in case host has several IPs)
HOST_IP=

# P2P ports you will forward to your staking node. Adjust here if you are
# going to use something other than defaults.
EL_P2P_PORT=30303
CL_P2P_PORT=9000
PRYSM_PORT=9000
PRYSM_UDP_PORT=9000
# Local grafana dashboard port. Do not expose to Internet, it is insecure http
GRAFANA_PORT=3000
# Pushgateway for Nethermind.
PUSHGATEWAY_PORT=9091
PUSHGATEWAY_URL=http://pushgateway:9091/metrics
# Local key manager port. Reachable only via localhost. Also doubles as Prysm web port
KEY_API_PORT=7500
# Secure web proxy port, 443 and 80 are great defaults
TRAEFIK_WEB_PORT=443
TRAEFIK_WEB_HTTP_PORT=80
# NOTE: If you configure EL_RPC_PORT or EL_WS_PORT then you should also add el-shared.yml to COMPOSE_FILE
# Execution client RPC port, important when using ec-shared.yml. Insecure, do not expose to Internet.
EL_RPC_PORT=8545
# Execution client WS port. Insecure, do not expose to Internet.
# Note that for Erigon, this needs to match EL_RPC_PORT
EL_WS_PORT=8546
# Erigon's torrent port. Don't make this 42070, that'll fail
ERIGON_TORRENT_PORT=42069
# SSV Node ports
SSV_P2P_PORT=13001
SSV_P2P_PORT_UDP=12001
# Engine port. Only for distributed setups, this should otherwise be left alone
EE_PORT=8551
# Consensus layer REST port. Only for distributed setups, this should otherwise be left alone
CL_REST_PORT=5052

# Additional parameters for the EL client. For example, on low-memory machines,
# you may want to use it to lower Geth cache, or to increase it on high-memory machines
#EL_EXTRAS=--cache=256
EL_EXTRAS=
# Additional parameters for the CL client.
CL_EXTRAS=
# Additional parameters for the validator client.
VC_EXTRAS=

# Heap for Besu and Teku, both written in Java. Sets JAVA_OPTS to this
# value, for example BESU_HEAP=-Xmx8g to set it to 8g. If left empty, the
# defaults in besu.yml and teku.yml are used.
BESU_HEAP=
TEKU_HEAP="-XX:SoftMaxHeapSize=4g -Xmx32g"

# If you want debug logs, set this to debug instead of info
LOG_LEVEL=info

# JWT secret for CL:EL connection. This is created automatically by default.
# If specified manually here, this could be used to split CL and EL to different
# machines. Do not use unless you have a distributed setup like that.
JWT_SECRET=
# If you run a distributed setup, setting this to DISTRIBUTED=true
# will stop the nag screens during ./ethd update
DISTRIBUTED=
# Authenticated execution client endpoint. This default uses the execution node container.
EL_NODE=http://execution:8551
# Consensus client address. This could be comma-separated for Lighthouse or Teku VC clients, with failover,
# or could just be a remote consensus client URL for "validator only" setups. Not in use for Nimbus.
CL_NODE=http://consensus:5052,http://sshtunnel-cl-s2:5052
# MEV-boost address. This would only be changed for Vouch setups
MEV_NODE=http://mev-boost:18550

# You can set specific version targets and choose binary or compiled from source builds below,
# via "Dockerfile.binary" or "Dockerfile.source"
# These settings are only migrated when running "./ethd update --keep-targets"
# The default source build targets build from the latest github tag

# SSV
SSV2_NODE_TAG=latest

# MEV-Boost
# If mev-boost terminates with a SIGILL, make this "latest-portable"
MEV_DOCKER_TAG=latest
MEV_DOCKERFILE=Dockerfile.binary

# Nimbus
# SRC build target can be a tag, a branch, or a pr as "pr-ID"
NIM_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
NIM_DOCKER_TAG=multiarch-latest
NIM_DOCKERFILE=Dockerfile.binary

# Teku
# SRC build target can be a tag or a branch
TEKU_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
TEKU_DOCKER_TAG=latest
TEKU_DOCKERFILE=Dockerfile.binary

# Lighthouse
# SRC build target can be a tag, a branch, or a pr as "pr-ID"
LH_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
# If Lighthouse terminates with a SIGILL, make this "latest"
LH_DOCKER_TAG=latest-modern
LH_DOCKERFILE=Dockerfile.binary

# Prysm
# SRC build target can be a tag or a branch
PRYSM_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
PRYSM_DOCKER_TAG=stable
PRYSM_DOCKERFILE=Dockerfile.binary

# Lodestar
# SRC build target can be a tag, a branch, or a pr as "pr-ID"
LS_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
LS_DOCKER_TAG=latest
LS_DOCKERFILE=Dockerfile.binary

# Besu
# SRC build target can be a tag, a branch, or a pr as "pr-ID"
BESU_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
BESU_DOCKER_TAG=latest-openjdk-latest
BESU_DOCKERFILE=Dockerfile.binary

# Erigon
# SRC build target can be a tag or a branch
ERIGON_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
ERIGON_DOCKER_TAG=stable
ERIGON_DOCKERFILE=Dockerfile.binary

# Nethermind
# SRC build target can be a tag or a branch
NM_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
NM_DOCKER_TAG=latest
NM_DOCKERFILE=Dockerfile.binary

# Go-Ethereum aka Geth
# SRC build target can be a tag, a branch, or a pr as "pr-ID"
GETH_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
GETH_DOCKER_TAG=stable
GETH_DOCKERFILE=Dockerfile.binary

#Akula
# SRC build target can be a tag or a branch
AKULA_SRC_BUILD_TARGET=master
AKULA_DOCKER_TAG=
AKULA_DOCKERFILE=Dockerfile.source

# staking-deposit-cli
# SRC build target can be a tag or a branch
DEPCLI_SRC_BUILD_TARGET='$(git describe --tags $(git rev-list --tags --max-count=1))'
# Does not (yet?) exist on Docker hub
DEPCLI_DOCKER_TAG=nonesuch

# For the Node Dashboard, define a regex of mount points to ignore for the diskspace check.
NODE_EXPORTER_IGNORE_MOUNT_REGEX='^/(dev|proc|sys|run|var/lib/docker/.+)($|/)'
